---
import Layout from "../layouts/Layout.astro";
import ArticlePreview from "../components/ArticlePreview.astro";

const PAGE_SIZE = 12;
const API_BASE = "http://localhost:8080";

const res = await fetch(`${API_BASE}/article?size=${PAGE_SIZE}&page=0`);
const data = await res.json();
const articles = data.articleSummaryList;
---

<Layout title="Hikmet Cakir Blog">  
  <div id="articles-grid" class="grid gap-8 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 px-[15%] py-10" data-api-base={API_BASE} data-page-size={PAGE_SIZE}>
    { articles.map((article) => <ArticlePreview article={article} key={article.id} />) }
  </div>
  <div id="scroll-sentinel" class="h-8"></div>
  <div id="loader" class="hidden fixed left-1/2 -translate-x-1/2 bottom-4 z-50 transform">
    <div class="animate-spin h-8 w-8 border-2 border-gray-300 border-t-black rounded-full"></div>
  </div>
  <div id="retry" class="flex justify-center py-4 hidden">
    <button class="px-4 py-2 border border-black rounded-full hover:bg-black hover:text-white">Tekrar Dene</button>
  </div>

  <script>
    const $ = (s) => document.querySelector(s);
    const grid = $('#articles-grid');
    const sentinel = $('#scroll-sentinel');
    const loader = $('#loader');
    const retry = $('#retry');
    if (grid && sentinel && loader && retry) {
    let page = 1, busy = false, more = true;
    const size = Number(grid.dataset.pageSize || '12');
    const base = grid.dataset.apiBase || '';
    const show = (el, v) => el.classList.toggle('hidden', !v);
    const trunc = (t, n = 180) => t ? (t.length > n ? t.slice(0, n) + '...' : t) : '';
    const card = (a) => {
      const el = document.createElement('article');
      el.className = 'bg-white rounded-3xl shadow-md hover:shadow-xl transition-all duration-300 overflow-hidden max-w-md mx-auto';
      el.innerHTML = `
        <div class="w-full h-56 overflow-hidden">
          <img src="${a.thumbnail || `https://picsum.photos/seed/${a.id}/600/400`}" alt="${a.title}" class="w-full h-full object-cover hover:scale-105 transition-transform duration-500" loading="lazy" />
        </div>
        <div class="p-6 flex flex-col">
          <div>
            <h2 class="text-2xl font-semibold mb-3 text-gray-900 line-clamp-2">${a.title}</h2>
            <p class="text-gray-700 leading-relaxed mb-6">${trunc(a.content)}</p>
          </div>
          <div class="mt-auto flex justify-end">
            <a href="/article/${a.id}" class="px-5 py-2 border border-black text-black rounded-full hover:bg-black hover:text-white transition-colors duration-300">Read More</a>
          </div>
        </div>`;
      return el;
    };
    // TEMP: artificial delay for spinner testing; remove after verification
    const sleep = (ms) => new Promise((r) => setTimeout(r, ms));
    const TEST_DELAY_MS = 800; // adjust as needed during testing

    const load = async () => {
      if (busy || !more) return; busy = true; show(loader, true); show(retry, false);
      try {
        const r = await fetch(`${base}/article?size=${size}&page=${page}`);
        await sleep(TEST_DELAY_MS);
        const { articleSummaryList: list = [] } = await r.json();
        list.forEach((a) => grid.appendChild(card(a)));
        more = list.length === size; page += more ? 1 : 0; if (!more) obs.disconnect();
      } catch (e) {
        console.error(e); show(retry, true);
      } finally {
        busy = false; show(loader, false);
      }
    };
    retry.querySelector('button').addEventListener('click', load);
    const obs = new IntersectionObserver((es) => es.some((e) => e.isIntersecting) && load(), { rootMargin: '200px 0px' });
    obs.observe(sentinel);
    }
  </script>
</Layout>
